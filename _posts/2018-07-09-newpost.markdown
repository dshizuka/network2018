---
layout: post
title: New Post
date: 2018-07-09
comments: true
archive: false
---
New post New post

1.1 What is R?
--------------

R is a language that allows you to do data manipulation, conduct any
data analysis you can think of, produce beautiful graphs, put together
and run simple models, simulations, randomizations... you name it.

#### Pros:

-   It’s all **free**, and it works across platforms (Linux, Mac, PC).  
-   **Packages**: free access to bundles of functions that allow you to
    do all kinds of stats, graphics, etc. You name it, there is probably
    a package for it. These are open source, which means that there are
    people who are constantly working to introduce new & improved
    packages. This also means that R packages are often more up-to-date
    than some bigger stats software.
-   **Graphics** are very pretty. Once you get the hang of it, you will
    be able to generate publication-quality figures in R.  
-   **Reproducibility**: Codes/Scripts = perfect record of everything
    you’ve done. You can apply the exact same analysis to different
    datasets without mistake. You know exactly what you did, and you can
    share this with collaborators without miscommunication.  
-   **Simulations and models:** If you’ve never been able to create your
    own simulations or theoretical models, you will be able to do them
    once you start learning R.  
-   **Statistical Analyses**: Most likely, it will also help you learn
    the proper ways to do stats instead of relying on canned functions
    in stats software.  
-   **Community**: Lots of online forums and help

#### Drawbacks:

-   You have to learn a language.

------------------------------------------------------------------------

1.2 Working with RStudio
------------------------

In this class, we will be using an open-source software called
*RStudio*. *RStudio* is an IDE (Integrated Development Environment)--a
fancy word for software that organizes windows and provides a layout
that helps make programming easier. Strictly speaking, you don't really
need *RStudio* or any other IDE. If you prefer, you can simply open the
R program and use the R console and editor as separate windows. However,
there are some benefits to using *RStudio*.

The main benefit to *RStudio* for this class is that it makes R look the
same across platforms. So it should make it easier for me to communicate
efficiently with Mac OS and Windows users. Another benefit is access to
other tools such as *Rmarkdown*, which we will learn to use later for
generating reports.  
First, open up the R Studio program. You will get a window with 3
panels. Click on the little icon at the top left that looks like this:
![](image/icon1.png)  
Now you will have 4 panels.

<img src="assets/image/panels.png" width="1352" style="display: block; margin: auto;" />

These are the 4 panels you will have:

1.  **Script Editor** (Top Left): This is where you will build your
    script. It is essentially a text file (but has some nice features
    like syntax coloring). This widow may not automatically appear, but
    we will use it a lot.
2.  **R Console** (Bottom Left). This is where the commands run.
3.  **Environment/History** (Upper Right). This area will show all
    objects that are loaded in the workspace. The "History" tab will
    show you what you have done in the current workspace.  
4.  **Plots, etc.** (Lower Right). This is where plots will show up.
    Other tabs will take you to help files, package manager, etc.

You can set the panels up however you like by going to
`[Preferences]`--`[Pane Layout]`. For this class, I recommend keeping
the pane layout the same as mine so you don't get confused.

------------------------------------------------------------------------

1.3 Running commands in the Console
-----------------------------------

Let’s start with something simple. Try typing the code that is shown in
the shaded area into the Console (bottom left panel) and press
`[return]`

    5*2

You should see an output like this:

    ## [1] 10

> <span style="color:purple">**Note**</span>  
> Here and throughout this course I will present code in the shaded box.
> This can be typed into the Console, or as you will see in next, you
> can copy and paste into the Script Editor. The output of codes, if
> shown, will be displayed below with hashtags (\#\#) in front.

*Back to the R language:* Just performing calculations isn’t that
useful--you could just use a calculator.  
R is called an *object-oriented language*. What this means is that we
can assign almost anything (numbers, text, matrices, data, functions,
etc.) into an entity called *object*, and then we can combine these
objects to do tasks. Try typing this into the R Console (bottom left)

    a = 5*2

You will note that there is no output after typing this in. R simply
registered the fact that you have assigned the output of the equation
`5*2` into an **object** called `a`. You can now display the object by
simply typing `a`

    a

    ## [1] 10

Note that you will also see whatever objects you create in the
"environment" window (top right panel).

Objects are the building blocks of tasks you will perform in R, and thus
assigning and manipulating objects is the essence of the R language.
Here, we have used an extremely simply example of an object--a number,
or **numeric** R lingo. You will see later that objects can be almost
anything--a set of numbers, characters, matrices, datasets, lists,
outputs of statistical analyses, and any number of special formats. You
will soon see that this simple concept can be scaled up to accomplish
very complex tasks efficiently.

> <span style="color:purple">**Some things to know:**</span>
>
> -   `>` is the prompt from R. It means that R is waiting for you to
>     enter something.
> -   R is case-sensitive
> -   Spaces are ignored
> -   If the console gets stuck, press `[esc]`
> -   Pressing `[return]` in the Console will run the command.
